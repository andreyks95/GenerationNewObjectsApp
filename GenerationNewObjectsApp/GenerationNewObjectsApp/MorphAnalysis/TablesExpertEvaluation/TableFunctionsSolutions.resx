<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP9gAAjwbQC58G0A//BtAOvvbQAvAAAAAPBtAJvwbQC98G0A//FuAFgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP9gAAjwbQC58G0A6+9wADAAAAAA724AgO9tANXwbQD/8W4AWAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP9gAAjwbQC48G0A+e9tAMTwbQD88G0AafBt
        AP/xbgBYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+AAAbwbQD/8GwAtfFv
        ADcAAAAA8G0A//FuAFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPBt
        AP/xbgBYAAAAAAAAAADwbQD/8G0A//BtAP/wbQD/8G0A//BtAP/wbQD/8G0A//BtAP/wbQD/8G0A//Bt
        AP/wbQD/8G0A//BtAP/wbQD/8G0A//BtAP/wbQD/8G0A//BtAP/wbQD/8G0A//BtAP/wbQD/8G0A//Bt
        AP/wbQD/8G0A//FuAFgAAAAAAAAAAPBtAP/vbQCR8W4AWPFuAFjxbgBY8W4AWPFuAFjxbgBY8W4AWPFu
        AFjxbgBY8W4AWPFuAFjxbgBY8W4AWPFuAFjxbgBY8W4AWPFuAFjxbgBY8W4AWPFuAFjxbgBY8W4AWPFu
        AFjxbgBY8W4AWPFuAFjwbQD/8W4AWAAAAAAAAAAA8G0A//FuAFgAAAAA7WoAHQAAAADtbQAO7W0ADgAA
        AADtagAdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPBtAP/xbgBYAAAAAAAAAADwbQD/8W4AWO1qAB3wbgCsAAAAAO9t
        AGLvbQBiAAAAAPBuAKztagAdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8G0A//FuAFgAAAAAAAAAAPBtAMrwbQCMAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPFtADjwbQD+8WoAJAAAAAAAAAAA8WwAXPBt
        AP7wbQC/8G0AqPBtAKjwbQCo8G0AqPBtAKjwbQCo8G0AqPBtAKjwbQCo8G0AqPBtAKjwbQCo8G0AqPBt
        AKjwbQCo8G0AqPBtAKjwbQCo8G0AqPBtAKjwbQCo8G0AqPBtAKjwbACu8G0A9O9uALMAAAAAAAAAAAAA
        AAAAAAAA7mwALe9tAJHwbQCo8G0AqPBtAKjwbQCo8G0AqPBtAKjwbQCo8G0AqPBtAKjwbQCo8G0AqPBt
        AKjwbQCo8G0AqPBtAKjwbQCo8G0AqPBtAKjwbQCo8G0AqPBtAKjwbQCo8G0AqPFtAKHvbgBP/1UAAwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////4AAAAcAAAAHP///4z////M////zP///8z////M////zPADB8zwA
        wPM//8BzP//mMzwAAxM8AAGDP//wwz//+GM8AAAhPAAAAD///wQ///+EP///wD///+E////zAAAAAwAA
        AAMpf//zCT//8z///+MAAAAHgAAAB/////8=
</value>
  </data>
</root>