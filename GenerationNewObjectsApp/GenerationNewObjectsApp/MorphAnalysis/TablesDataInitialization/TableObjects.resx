<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAANcNAADXDQAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnwUONZ8FELyfACAIAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKEADROfBhDhnwYQ/58H
        EJwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAABnwYPt58G
        EP+fBhD/nwYQ/54FEGEAAAAAAAAAAAAAAAAAAAAAAAAAAJ8IEECfBg93nwYReJ8GEXifBhF4nwYReJ8G
        EXifBhF4nwYReJ8GEXifBhF4nwYReJ8GEXifBhF4nwYReJ8GEXifBhF4nwYReJ8GEXigBg92nQAUDZ8G
        EH2fBhD/nwYQ/58GEP+fBhD/nwYQ9p0FEC8AAAAAAAAAAAAAAAAAAAAAnwYQ3p8GEICfBhCAnwYQgJ8G
        ENCfBhGonwYQgJ8GEICfBhCAnwYQgJ8GEICfBhCAnwYQ1J8GEKSfBhCAnwYQgJ8GEICfBhCAnwYQgJ4G
        EVyfBw9FnwYQ/Z8GEP+fBhD/nwYQ/58GEP+fBhD/oAYQ25kAEQ8AAAAAAAAAAAAAAACfBhDwAAAAAAAA
        AAAAAAAAnwYQoJ8GEFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfBhGonwcSSAAAAAAAAAAAAAAAAAAA
        AAAAAAAAmwkSHKAHEOufBhD/nwYQ/58GEP+fBhD/nwYQ/58GEP+fBhD/ngYQrgAAAAAAAAAAAAAAAJ8G
        EPAAAAAAAAAAAAAAAACfBhCgnwYQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ8GEaifBxJIAAAAAAAA
        AAAAAAAAAAAAAJkAAAWeBg/GnwYQ/58GEP+fBhD/nwYQ/58GEP+fBhD/nwYQ/58GEP+fBhD/ngcPdAAA
        AAAAAAAAnwYQ+J8GEICfBhCAnwYQgJ8GENCfBhGonwYQgJ8GEICfBhCAnwYQgJ8GEICfBhCAnwYQ1J8G
        EKSfBhCAnwYQgKAGEXuSAAAHngUQkZ8GEP+fBhD/nwYQ/58GEP+fBhD/nwYQ/58GEP+fBhD/nwYQ/58G
        EP+gBhD7nwQRPQAAAACfBg/3nwcQcJ8HEHCfBxBwnwYQyp8GEJ2fBxBwnwcQcJ8HEHCfBxBwnwcQcJ8H
        EHCeBhDOnwcRmJ8HEHCfBxBwnwcRSqAGD1afBhD/nwYQ/58GEO+fBRCSnwYQ/58GEP+fBhD/nwYQ/54G
        EM6fBg+1nwYQ/Z8GEP+fBhDmmwsLF58GEPAAAAAAAAAAAAAAAACfBhCgnwYQUAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAJ8GEaifBxJIAAAAAAAAAACeCA8inwYQ8p8HEMKfBRBdngQSOp4IDyKfBhD/nwYQ/58G
        EP+fBhD/nwYRqAAAAACiBhMpnwYQgJ8GEOKfBRC6nwYQ8AAAAAAAAAAAAAAAAJ8GEKCfBhBQAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAnwYRqJ8HEkgAAAAAAAAAAKQAEg6fBw4lAAAAAAAAAACfBhCgnwcSSJ8G
        EP+fBhD/nwYQ/58GEP+fBhGoAAAAAJ8FEWieBg+EgAAAAp8FEDCfBg/3nwcQcJ8HEHCfBxBwnwYQyp8G
        EJ2fBxBwnwcQcJ8HEHCfBxBwnwcQcJ8HEHCeBhDOnwcRmJ8HEHCfBxBwnwcQcJ8HEHCfBxBwnwcQcJ8G
        EMqfBxJInwYQ/58GEP+fBhD/nwYQ/58GEaibCRIcnwYRqp8FEJAAAAAAAAAAAJ8GEPifBhCAnwYQgJ8G
        EICfBhDQnwYRqJ8GEICfBhCAnwYQgJ8GEICfBhCAnwYQgJ8GENSfBhCknwYQgJ8GEICfBhCAnwYQgJ8G
        EICfBhCAnwYQ0J8HEkifBhD/nwYQ/58GEP+fBhD/nwYRqJ8IECCfBhC0nwUQkAAAAAAAAAAAnwYQ8AAA
        AAAAAAAAAAAAAJ8GEKCfBhBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnwYRqJ8HEkgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACfBhCgnwcSSJ8GEP+fBhD/nwYQ/58GEP+fBhGoAAAAAJ8FEWifBRCQAAAAAAAA
        AACfBhDwAAAAAAAAAAAAAAAAnwYQoJ8GEFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfBhGonwcSSAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ8GEKCfBxJInwYQ/58GEP+fBhD/nwYQ/58GEagAAAAAnwURaJ8F
        EJAAAAAAAAAAAKAGEPOfBRI4nwUSOJ8FEjifBg+1oAYPdp8FEjifBRI4nwUSOJ8FEjifBRI4nwUSOKAF
        ELufBxBwnwUSOJ8FEjifBRI4nwUSOJ8FEjifBRI4nwYPtZ8HEkifBhD/nwYQ/58GEP+fBhD/nwYRqKQA
        Eg6eBhGJnwUQkAAAAAAAAAAAoAYQ+58GEbifBhG4nwYRuJ8GEOWeBhDOnwYRuJ8GEbifBhG4nwYRuJ8G
        EbifBhG4nwYP558GEMyfBhG4nwYRuJ8GEbifBhG4nwYRuJ8GEbifBhDlnwcSSJ8GEP+fBhD/nwYQ/58G
        EP+fBhGooQYRLp8GENWfBRCQAAAAAAAAAACfBhDwAAAAAAAAAAAAAAAAnwYQoJ8GEFAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACfBhGonwcSSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ8GEKCfBxJInwYQ/58G
        EP+fBhD/nwYQ/58GEagAAAAAnwURaJ8FEJAAAAAAAAAAAJ8GEPAAAAAAAAAAAAAAAACfBhCgnwYQUAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ8GEaifBxJIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnwYQoJ8H
        EkifBhD/nwYQ/58GEP+fBhD/nwYRqAAAAACfBRFonwUQkAAAAAAAAAAAnwYQ8AAAAAAAAAAAAAAAAJ8G
        EKCfBhBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnwYRqJ8HEkgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACfBhCgngcRTJ8GENyfBhDwnwYQ8J8GEPCfBhGKAAAAAJ8FEWifBRCQAAAAAAAAAACgBhD7nwYRuJ8G
        EbifBhG4nwYQ5Z4GEM6fBhG4nwYRuJ8GEbifBhG4nwYRuJ8GEbifBg/nnwYQzJ8GEbifBhG4nwYRuJ8G
        EbifBhG4nwYRuJ8GEOWgBhDLnwYReJ8FEWifBRFonwURaKAGD3afBhC0nwYQ1Z8FEJAAAAAAAAAAAKAG
        EPOfBRI4nwUSOJ8FEjifBg+1oAYPdp8FEjifBRI4nwUSOJ8FEjifBRI4nwUSOKAFELufBxBwnwUSOJ8F
        EjifBRI4nwUSOJ8FEjifBRI4nwYPtaAGD3afBRI4nwUSOJ8FEjifBRI4nwUSOJ8FEjieBhGJnwUQkAAA
        AAAAAAAAnwYQ8AAAAAAAAAAAAAAAAJ8GEKCfBhBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnwYRqJ8H
        EkgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfBhCgnwYQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ8F
        EWifBRCQAAAAAAAAAACfBhDwAAAAAAAAAAAAAAAAnwYQoJ8GEFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACfBhGonwcSSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ8GEKCfBhBQAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAnwURaJ8FEJAAAAAAAAAAAJ8GEPWfBhBQnwYQUJ8GEFCeBRC+nwYPh58GEFCfBhBQnwYQUJ8G
        EFCfBhBQnwYQUKAHEMOeBhCBnwYQUJ8GEFCfBhBQnwYQUJ8GEFCfBhBQngUQvp8GD4efBhBQnwYQUJ8G
        EFCfBhBQnwYQUJ8GEFCfBw+XnwUQkAAAAAAAAAAAnwYQ/58GEP+fBhD/nwYQ/58GEP+gBxDDnwYRqJ8G
        EaifBhGonwYRqJ8GEaifBhGonwYQ4Z8HEMCfBhGonwYRqJ8GEaifBhGonwYRqJ8GEaifBhDfoAcQw58G
        EaifBhGonwYRqJ8GEaifBhGonwYRqKAGEMufBRCQAAAAAAAAAACfBhD/nwYQ/58GEP+fBhD/nwYQ/58G
        EFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfBhGonwcSSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ8G
        EKCfBhBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnwURaJ8FEJAAAAAAAAAAAJ8GEP+fBhD/nwYQ/58G
        EP+fBhD/nwYQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ8GEaifBxJIAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAnwYQoJ8GEFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfBRFonwUQkAAAAAAAAAAAnwYQ/p8G
        EP+fBhD/nwYQ/58GEP+fBhBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnwYRqJ8HEkgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACfBhCgnwYQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAHEWugBRCOAAAAAAAA
        AACfBw+VnwYQ758GEPCfBhDwnwYQ8J8GEPCfBhDwnwYQ8J8GEPCfBhDwnwYQ8J8GEPCfBhDwnwYQ8J8G
        EPCfBhDwnwYQ8J8GEPCfBhDwnwYQ8J8GEPCfBhDwnwYQ8J8GEPCfBhDwnwYQ8J8GEPCfBhDwnwYQ3p4F
        DjcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////j////w////4HwAAAA8AAAAHc/PgB3PzwAMAAAABAAAAAHPz
        ABBz8zAQAAAAAwAAAANz8/ATc/PwEwAAAAMAAAADc/PwE3Pz8BNz8/ATAAAAAwAAAANz8/Pzc/Pz8wAA
        AAMAAAADA/Pz8wPz8/MD8/PzAAAAA/////8=
</value>
  </data>
</root>