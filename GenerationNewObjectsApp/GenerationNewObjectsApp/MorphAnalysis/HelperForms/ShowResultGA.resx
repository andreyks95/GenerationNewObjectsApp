<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        4H+II+B/EAP//wAB//8ngf//B8n//wfJ//8=
</value>
  </data>
</root>